#!/bin/bash
###########################################################################
#
# Copyright (c) 2016 Jorge Nunes, All Rights Reserved.
#
#
# Updates the project version in all pom.xml files to match the
# version defined in "conf/yawg-defaults.conf".
#
###########################################################################

_scriptName=$0
_scriptDir=$(dirname $0)
_yawgHome=$(cd $_scriptDir/../..; pwd)

source ${_yawgHome}/lib/bash/yawg-utils.sh
source ${_yawgHome}/conf/yawg-defaults.conf





PRODUCT_NAME="Yawg"
TOOL_NAME="Version updater"
COPYRIGHT_HEADER="Copyright (c) 2016 Jorge Nunes, All Rights Reserved."
PRODUCT_HEADER="${PRODUCT_NAME} ${YAWG_VERSION} - ${TOOL_NAME}"

DEFAULT_NEW_BUILD_NUMBER=SNAPSHOT

_newBuildNumber=${DEFAULT_NEW_BUILD_NUMBER}
_newVersion=
_isQuiet=false
_masterConfFile=${_yawgHome}/conf/yawg-defaults.conf
_xsltprocTool=xsltproc





#######################################################################
#
# The main script.
#
#######################################################################

function main () {

    processCliArgs "$@"

    yawgCheckForTools \
        "${_xsltprocTool}"
    
    updateVersion
}





###########################################################################
#
# Processes the command line options.
#
###########################################################################

function processCliArgs () {

    for option in "$@" ; do
        case $option in
            --quiet )
                _isQuiet=true
                ;;
            --build-number=* )
                _newBuildNumber=$(expr "$option" : '--build-number=\(.*\)')
                ;;
            --help )
                displayHelp
                exit 0
                ;;
            --*=* )
                option=$(expr $option : '\(--.*\)=.*')
                yawgError "$option : unknown option. Use --help for details."
                ;;
            * )
                yawgError "$option : unknown option. Use --help for details."
                ;;
        esac
    done

    if [ -z "$_newBuildNumber" ] ; then
        yawgError "Missing mandatory --build-number option. Use --help for details."
    fi
}





###########################################################################
#
# Displays an help messages describing the configuration options.
#
###########################################################################

function displayHelp () {

    cat <<EOF

${PRODUCT_HEADER}
${COPYRIGHT_HEADER}

Updates the version number in source files.

Available options:

--build-number=BUILD_NUMBER
    Version number sufix. The product version is obtained by
    concatenating the main version with the provided build number. If
    not specified it will default to
    ${DEFAULT_NEW_BUILD_NUMBER}. Special value NONE means no build
    number is to be appended to the version number.

--quiet
    Do not show any logging messages.

--help
    Prints this help text.

EOF
}





#######################################################################
#
# 
#
#######################################################################

function updateVersion () {

    myLog "${PRODUCT_HEADER}"
    myLog "    Build number : ${_newBuildNumber}"

    updateBuildNumberInConfigFile

    local newVersion=$(source ${_masterConfFile} ; echo ${YAWG_VERSION})
    myLog "Syncing version to ${newVersion}"

    updateVersionInPomFiles

    myLog "Done updating build number to ${_newBuildNumber}"
}





#######################################################################
#
# 
#
#######################################################################

function updateBuildNumberInConfigFile () {

    local confFile=${_masterConfFile}
    local tmpConfFile=${confFile}.new
    local newBuildNumber=${_newBuildNumber}

    if [ "${newBuildNumber}" == NONE ] ; then
        newBuildNumber=""
    fi

    sed "s/^YAWG_BUILD_NUMBER=.*/YAWG_BUILD_NUMBER=${newBuildNumber}/" \
        < ${confFile} \
        > ${tmpConfFile}

    mv ${tmpConfFile} ${confFile}
}





#######################################################################
#
# 
#
#######################################################################

function updateVersionInPomFiles () {

    local newVersion=$(source ${_masterConfFile} ; echo ${YAWG_VERSION})

    myLog "Updating POM files..."

    local pomBase=${_yawgHome}/modules
    local pomFileList="
        ${pomBase}/pom.xml
        ${pomBase}/*/pom.xml
"

    for pomFile in ${pomFileList} ; do
        myLog "    $(getRelativePath ${pomFile} ${pomBase})"
        updateVersionInOnePomFile ${newVersion} ${pomFile}
    done
}





###########################################################################
#
# 
#
###########################################################################

function updateVersionInOnePomFile () {

    local newVersion=$1
    local pomFile=$2

    local newPomVersion=${newVersion}
    local newParentVersion=${newVersion}
    local newPomFile=${pomFile}.new
    local xsltFile=${_scriptDir}/../lib/xslt/update-pom-version.xsl

    ${_xsltprocTool} \
        --stringparam NEW_POM_VERSION "${newPomVersion}" \
        --stringparam NEW_PARENT_VERSION "${newParentVersion}" \
        --output ${newPomFile} \
        ${xsltFile} \
        ${pomFile}

    local xsltprocStatus=$?

    if [ ${xsltprocStatus} -eq 0 ] ; then
        mv ${newPomFile} ${pomFile}
    else
        rm -f ${newPomFile}
    fi
}





###########################################################################
#
# 
#
###########################################################################

function myLog () {

    if [ ${_isQuiet} != true ] ; then
        yawgLog "$@"
    else
        : # Show no logging.
    fi
}





#######################################################################
#
# 
#
#######################################################################

function getRelativePath () {

    local path=$1
    local basePath=$2

    python -c "import os.path; print os.path.relpath('${path}', '${basePath}')"
}





#######################################################################
#
# 
#
#######################################################################

main "$@"





#######################################################################
#
# 
#
#######################################################################

